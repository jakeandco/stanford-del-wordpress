// -----------------------------------------------------------------------------
// This file contains very basic styles.
// -----------------------------------------------------------------------------

/**
 * Set up a decent box model on the root element
 */

:scope {
  box-sizing: border-box;

  @each $key, $value in $spacers {
    --spacing--#{$key}: #{$value};
  }
}

/**
 * Make all elements from the DOM inherit from the parent box-sizing
 * Since `*` has a specificity of 0, it does not override the `html` value
 * making all elements inheriting from the root box-sizing value
 * See: https://css-tricks.com/inheriting-box-sizing-probably-slightly-better-best-practice/
 */

*,
*::before,
*::after {
  box-sizing: inherit;
}

//- HTML5 display-role reset for older browsers
main,
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
menu,
nav,
section {
  display: block;
}

// adaptive images
img,
svg {
  max-width: 100%;
  height: auto;
  vertical-align: top;
  display: inline-block;
}


.block-wrapper {
  position: relative;

  .container {
    opacity: 0;
    transition: opacity 0.8s ease-out, transform 0.8s ease-out;
  }

  &.visible {
    .container {
      opacity: 1;
    }
  }
}

[data-bs-theme]:not([class*="bg-"]) {
  @extend .bg-primary;
  color: var(--#{$prefix}body-color);
  --btn-color: var(--#{$prefix}btn-color);
  --btn-bg: var(--#{$prefix}btn-bg);
  --btn-hover-color: var(--#{$prefix}btn-hover-color);
  --btn-hover-bg: var(--#{$prefix}btn-hover-bg);

  .btn-primary {
    color: var(--btn-color);
    background: var(--btn-bg);
    border-color: var(--btn-bg);

    &:hover {
      color: var(--btn-hover-color);
      background: var(--btn-hover-bg);
      border-color: var(--btn-hover-bg);
    }
  }
}
